import java.io.*;
import java.util.*;
import java.util.regex.*;

public class Main {
    public static void main(String[] args) {
        try {
            // ======================================================================
            // 1. ЧТЕНИЕ ФАЙЛА
            // ======================================================================

            // BufferedReader используется для эффективного построчного чтения файла
            // "text.txt" должен находиться в той же папке, где запускается программа
            BufferedReader reader = new BufferedReader(new FileReader("text.txt"));

            // StringBuilder накапливает содержимое файла в одну строку
            // (используется вместо String для лучшей производительности)
            StringBuilder textfile = new StringBuilder();

            // Чтение файла построчно
            String line;
            while ((line = reader.readLine()) != null) {
                // Добавляем каждую строку + пробел (чтобы слова не склеивались между строками)
                textfile.append(line).append(" ");
            }
            // Важно закрыть файл после чтения
            reader.close();

            // ======================================================================
            // 2. ИЗВЛЕЧЕНИЕ СЛОВ ИЗ ТЕКСТА
            // ======================================================================

            // Список для хранения всех найденных слов
            List<String> words = new ArrayList<>();

            // Регулярное выражение [a-zA-Z']+:
            // - находит последовательности букв (a-z, A-Z) и апострофов (')
            // - игнорирует цифры, знаки препинания и другие символы
            Matcher matcher = Pattern.compile("[a-zA-Z']+").matcher(textfile.toString());

            // Поиск всех совпадений с регулярным выражением
            while (matcher.find()) {
                // Приводим слово к нижнему регистру для единообразия
                String word = matcher.group().toLowerCase();

                // Добавляем слово в список, если оно не пустое
                if (!word.isEmpty()) {
                    words.add(word);
                }
            }

            // Проверка на пустой файл или отсутствие слов
            if (words.isEmpty()) {
                System.out.println("Файл не содержит слов или не был найден.");
                return; // Завершаем программу, если слов нет
            }

            // ======================================================================
            // 3. СОРТИРОВКА И ВЫВОД СЛОВ
            // ======================================================================

            // Сортируем слова в алфавитном порядке (по возрастанию)
            Collections.sort(words);

            // Выводим заголовок с количеством слов
            System.out.println("Отсортированные слова (" + words.size() + "):");

            // String.join объединяет слова через пробел в одну строку
            System.out.println(String.join(" ", words) + "\n");

            // ======================================================================
            // 4. ПОДСЧЕТ ЧАСТОТЫ СЛОВ
            // ======================================================================

            // TreeMap автоматически сортирует слова по алфавиту (по ключу)
            Map<String, Integer> wordCounts = new TreeMap<>();

            // Подсчет количества вхождений каждого слова
            for (String word : words) {
                // getOrDefault возвращает текущее значение счетчика или 0, если слова еще нет
                wordCounts.put(word, wordCounts.getOrDefault(word, 0) + 1);
            }

            // ======================================================================
            // 5. ВЫВОД СТАТИСТИКИ
            // ======================================================================

            System.out.println("Статистика слов:");

            // Общее количество слов (для расчета процентов)
            int totalWords = words.size();

            // Вывод статистики для каждого слова:
            // - слово (выравнивание по левому краю, 15 символов)
            // - количество вхождений (2 цифры)
            // - процентное соотношение (2 знака после запятой)
            wordCounts.forEach((word, count) -> {
                double percentage = (count * 100.0) / totalWords;
                System.out.printf("%-15s: %2d (%.2f%%)\n", word, count, percentage);
            });

            // ======================================================================
            // 6. ПОИСК САМЫХ ЧАСТЫХ СЛОВ
            // ======================================================================

            // Находим максимальное значение частоты (сколько раз встречается самое частое слово)
            int maxCount = Collections.max(wordCounts.values());

            // Список для хранения самых частых слов (их может быть несколько)
            List<String> mostFrequent = new ArrayList<>();

            // Заполняем список словами с максимальной частотой
            wordCounts.forEach((word, count) -> {
                if (count == maxCount) mostFrequent.add(word);
            });

            // ======================================================================
            // 7. ВЫВОД РЕЗУЛЬТАТОВ
            // ======================================================================

            System.out.println("\nСамые частые слова:");

            // Рассчитываем процентное соотношение для самых частых слов
            double maxPercentage = (maxCount * 100.0) / totalWords;

            // Выводим каждое частое слово в формате:
            // слово (15 символов) : количество (процент)
            mostFrequent.forEach(word -> {
                System.out.printf("%-15s: %2d (%.2f%%)\n", word, maxCount, maxPercentage);
            });

        } catch (FileNotFoundException e) {
            // Ошибка: файл не найден
            System.err.println("Ошибка: Файл text.txt не найден!");
            System.err.println("Убедитесь, что файл находится в правильной директории.");
        } catch (IOException e) {
            // Другие ошибки ввода-вывода
            System.err.println("Ошибка ввода-вывода: " + e.getMessage());
        }
    }
}